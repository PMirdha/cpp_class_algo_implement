class MinPriorityQueue
{
public:
	vector<int> pque;
	int n;

	PriorityQueue()
	{
		this->n=0;
	}

	void insert(int x)
	{
		this->n++;
		this->pque.push_back(x);
		heapify_upward(n-1);
	}
	int min_value()
	{
		if(!empty())
			return(*(this->pque.begin()));
		else
		{
			cout<<"No values in queue"<<endl;
			return(-1);
		}
	}
	void pop_min()
	{
		if(!empty())
		{
			int val=this->pque[this->n-1];
			this->pque[0]=val;
			this->pque.pop_back();
			this->n--;
			percolate_down(0);
		}
		else
			cout<<"nothing to pop"<<endl;
	}
	bool empty()
	{
		if(this->n==0)
		{
			return(true);
		}
		else
		{
			return(false);
		}
	}
	void swap_func(vector<int>&a,int i,int j)
	{
		a[i]^=a[j];
		a[j]^=a[i];
		a[i]^=a[j];
	}
	void heapify_upward(int index)
	{
		int p=(index-1)/2;//For 1 based =(index-2)/2;
		while(this->pque[p]>this->pque[index] && index>=0)
		{
			swap_func(this->pque,p,index);
			index=p;
			p=(index-1)/2;//For 1 based =(index-2)/2;
		}
	}
	void percolate_down(int index)
	{
		int ch1=2*(index)+1, ch2=2*(index)+2;//For 1 based =2*(index),=2*(index)+1;
		while((ch1<n && this->pque[ch1]<this->pque[index])||(ch2<n && this->pque[ch2]<this->pque[index]))
		{
			if(ch1<n && ch2<n)
			{
				if(this->pque[ch1]<this->pque[ch2])
				{
					swap_func(this->pque,ch1,index);
					index=ch1;
				}
				else
				{
					swap_func(this->pque,ch2,index);
					index=ch2;
				}
			}
			else if(ch1<n)
			{
				if(this->pque[ch1]<this->pque[index])
				{
					swap_func(this->pque,ch1,index);
					index=ch1;
				}
			}
			else if(ch2<n)
			{
				if(this->pque[ch1]<this->pque[index])
				{
					swap_func(this->pque,ch2,index);
					index=ch2;
				}
			}
			ch1=2*(index)+1;ch2=2*(index)+2;//For 1 based =2*(index),=2*(index)+1;
		}
	}
	void print_pque()
	{
		int i=0;
		FOR(i,0,this->n-1)
		{
			cout<<this->pque[i]<<" ";
		}
		cout<<endl;
	}
	
};